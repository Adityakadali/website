---
layout: article
title: Deployment
description: Efficiently deploy your Appwrite projects using the Command-Line Tool (CLI). Explore deployment options, strategies, and best practices for a smooth deployment process.
---

After you're logged in, the Apprite CLI allows you to create and deploy databases, collections, buckets, teams and functions to your Appwrite project from a configuration file. This is especially helpful if you're trying to track project setup using version control.

# Initialization {% #initialization %}

The CLI needs to be initialized with your Appwrite project. You can initialize the CLI using:

```sh
appwrite init
```

The following prompts will guide you through the setup process. The init command also creates an [appwrite.json](/docs/tooling/command-line/deployment#appwrite-json) file representing your Appwrite project.

{% info title="Self Hosted" %}
This command will guide you through the login process if you haven't logged in yet. For self-hosted setups, use it with the `--self-hosted` flag.

```sh
appwrite init --self-hosted
````

{% /info %}

You can pull all the existing databases and collections in your current project using:

```sh
appwrite pull collections
```

You can pull all existing functions, teams, buckets and messaging-topics in your current project using the following commands:

```sh
appwrite pull functions
appwrite pull teams
appwrite pull buckets
appwrite pull topics
```

# Pushing Functions {% #pushing-function %}

The CLI also handles the creation and deployment of Appwrite Functions. Run this command in the folder holding your `appwrite.json` file.

```sh
appwrite init function
? What would you like to name your function? My Awesome Function
? What ID would you like to have for your function? unique()
? What runtime would you like to use? Node.js (node-18.0)
ℹ Info Loading templates...
? What template would you like to use? Starter
✓ Success
```

This command creates a new function **My Awesome Function** using the **Starter** template in your current Appwrite project. Any of the available [templates](https://github.com/appwrite/templates) for a given runtime can be used.

You can now deploy this function by running this command in the folder holding your `appwrite.json` file.

```sh
appwrite push functions
? Which functions would you like to push? My Awesome Function (6655ee9f002d13d045a1), My Awesome Function (665639820029e9f0f33c)
ℹ Info Validating functions
ℹ Info All functions are validated
ℹ Info Pushing functions

✓ Deployed     • My Awesome Function (665639820029e9f0f33c)

✓ Success Pushed 1 functions with 1 successful deployments.
```

The command will deploy all the selected functions asynchronously and will update you with the deployment results.

For long deployments, you can skip the deployment check by adding the  `--async` flag

```sh
appwrite push functions --async
```

# Pushing Collections {% #pushing-collections %}

The Appwrite CLI also allows you to deploy or update your project's databases and collections using the [appwrite.json](/docs/tooling/command-line/deployment#appwrite-json) schema, this can be very handy for large teams and for CI/CD pipelines.

You can push all the databases and collections in your [appwrite.json](/docs/tooling/command-line/deployment#appwrite-json) file by running this command in the folder holding your `appwrite.json` file.

The push command will check for any conflicts, such as adding, type changing, or deleting attributes and indexes, and will display a summary table of actions for you to review and decide on.

```sh
appwrite push collections
```

# Pushing Teams {% #pushing-teams %}

The Appwrite CLI can create teams to organize users. Teams can be used to grant access permissions to a group of users. Learn more about permissions.

Push teams by running this command in the folder holding your `appwrite.json` file.

```sh
appwrite push teams
```

# Push Storage {% #push-storage %}

The Appwrite CLI allows you to configure and push buckets across projects. All the bucket's settings are available through the [appwrite.json](/docs/tooling/command-line/deployment#appwrite-json) file.

Push storage buckets by running this command in the folder holding your `appwrite.json` file.

```sh
appwrite push buckets
```

# Pushing Messaging Topics {% #pushing-topics %}

The Appwrite CLI allows you to configure and push messaging topics across projects. All the messaging topics settings are available through the [appwrite.json](/docs/tooling/command-line/deployment#appwrite-json) file.

Push topics by running this command in the folder holding your `appwrite.json` file.

```sh
appwrite push topics
```

# Push All {% #push-all %}

To push all available resources at once, run

```sh
appwrite push all
```

# Conflicts {% #conflicts %}

When using `appwrite.json`, changes made in the Appwrite Console can cause conflicts with the local config. To avoid conflicts, choose one method and stick to it.

# The appwrite.json file {% #appwrite-json %}

An `appwrite.json` file is created by the CLI when you initialize your project. It stores all the configuration for the CLI to be able to interact with your Appwrite project in JSON format.
When using the `appwrite push` command, the CLI uses information from `appwrite.json` to deploy your functions and collections.

When using the `appwrite pull` command, the CLI will update the `appwrite.json` with the latest information..

## Configuration {% #configuration %}

Here's a complete list of all configurable options in `appwrite.json`:

| Option            | Type                      | Description                                                                 |
|-------------------|---------------------------|-----------------------------------------------------------------------------|
| `projectId`       | string                    | ID of your Appwrite Project.                                                |
| `projectName`     | string                    | Name of your Appwrite Project.                                              |
| `projectSettings` | object                    | Object contains your Appwrite services, auth methods and security settings. |
| `functions`       | array of functions        | Configuration of functions in your project.                                 |
| `databases`       | array of databases        | Configuration of databases in your project.                                 |
| `collections`     | array of collections      | Configuration of collections in your project.                               |
| `teams`           | array of teams            | Configuration of teams in your project.                                     |
| `buckets`         | array of buckets          | Configuration of teams in your project.                                     |
| `topics`          | array of messaging topics | Configuration of messaging topics in your project.                          |

### Project settings {% #project-settings %}

| Option          | Type   | Description                                                                                                                                                                                                                                            |
|-----------------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `services`      | object | [API Services](/docs/references#api) enabled status, such as `account`, `database`, `functions`, which can be set to `true` or `false`.                                                                                                                |
| `auth.methods`  | object | [Authentication methods](/docs/products/auth#auth-methods) enabled status, such as `email-password`, `jwt`, `phone`, which can be set to `true` or `false`.                                                                                            |
| `auth.security` | object | Authentication [security settings](/docs/products/auth/security), including `duration`, `limit`, `sessionsLimit`, and `passwordHistory` with numeric values. And, `passwordDictionary` and `personalDataCheck`, which can be set to `true` or `false`. |

### Function options {% #function-options %}

| Option       | Type             | Description                                                                                                            |
|--------------|------------------|------------------------------------------------------------------------------------------------------------------------|
| `$id`        | string           | Function ID.                                                                                                           |
| `name`       | string           | Function Name.                                                                                                         |
| `runtime`    | string           | Function runtime, must be enabled. [Learn more about runtimes](/docs/products/functions/runtimes#available-runtimes).  |
| `path`       | string           | Path to folder containing the function's source code.                                                                  |
| `entrypoint` | string           | Entry point of the function relative to the folder specified in path.                                                  |
| `ignore`     | array of strings | Files from your source code that should be ignored when creating a deployment.                                         |
| `execute`    | array of strings | Grants execute permissions to users. [Learn more about role strings](/docs/apis/rest#permissions).                     |
| `events`     | array of strings | Events that trigger the function to execute. [Learn more about events](/docs/advanced/platform/events).                |
| `schedule`   | string           | Execute schedule for the function. [Learn more about scheduled executions](/docs/products/functions/execute#schedule). |
| `timeout`    | int              | Execution timeout of the function in seconds, with a maximum configurable limit of 900 seconds.                        |
| `variables`  | JSON object      | Variables provided to the function on execution stored as a key-value JSON object.                                     |

### Databases options {% #database-options %}

| Option | Type   | Description    |
|--------|--------|----------------|
| `$id`  | string | Database ID.   |
| `name` | string | Database Name. |

### Collection options {% #collection-options %}

| Option             | Type             | Description                                                                                                                                 |
|--------------------|------------------|---------------------------------------------------------------------------------------------------------------------------------------------|
| `$id`              | string           | Collection ID.                                                                                                                              |
| `name`             | string           | Collection Name.                                                                                                                            |
| `databaseId`       | string           | ID of the database to which this collection belongs.                                                                                        |
| `enabled`          | bool             | If the collection is enabled.                                                                                                               |
| `documentSecurity` | bool             | If access permissions can be defined at the document level.                                                                                 |
| `$permissions`     | array of strings | Grants access permissions to users at the collection level. [Learn more about permissions](/docs/apis/rest#permissions).                    |
| `attributes`       | array of objects | Defines a list of attributes in the collection. [Learn more about the Attributes List Object](/docs/references/cloud/models/attributeList). |
| `indexes`          | array of objects | Defines a list of indexes in the collection. [Learn more about the Indexes List Object](/docs/references/cloud/models/indexList).           |

### Buckets options {% #bucket-options %}

| Option                  | Type             | Description                                                                                                          |
|-------------------------|------------------|----------------------------------------------------------------------------------------------------------------------|
| `$id`                   | string           | Bucket ID.                                                                                                           |
| `name`                  | string           | Bucket Name.                                                                                                         |
| `$permissions`          | array of strings | Grants access permissions to users at the bucket level. [Learn more about permissions](/docs/apis/rest#permissions). |
| `fileSecurity`          | boolean          | Whether file-level security is enabled. [Learn more about permissions](/docs/apis/rest#permissions).                 |
| `enabled`               | boolean          | Whether the bucket is enabled or disabled.                                                                           |
| `maximumFileSize`       | integer          | Maximum file size supported.                                                                                         |
| `allowedFileExtensions` | string\[\]       | List of allowed file extensions.                                                                                     |
| `compression`           | string           | Preferred algorithm for compression. Will be one of `none`, `gzip`, or `zstd`.                                       |
| `encryption`            | boolean          | Whether the bucket's content is encrypted.                                                                           |
| `antivirus`             | boolean          | Whether virus scanning is enabled for the bucket's content.                                                          |

### Teams options {% #team-options %}

| Option | Type   | Description |
|--------|--------|-------------|
| `$id`  | string | Team ID.    |
| `name` | string | Team Name.  |

### Messaging Topics options {% #messaging-topics-options %}

| Option | Type   | Description |
|--------|--------|-------------|
| `$id`  | string | Topic ID.   |
| `name` | string | Topic Name. |
