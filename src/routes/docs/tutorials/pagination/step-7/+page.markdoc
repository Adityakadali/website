---
layout: tutorial
title: Implementing the offset pagination
description: Explore offset pagination and how the react app accesses the Appwrite backend using this method.
step: 7
---
In this step, we'll delve into adding the offset pagination method to our app.

# What is offset pagination? {% #what-is-offset-pagination %}
Offset pagination is widely used in databases and online APIs to extract specific data subsets from a bigger whole. It requires you to tell it where to start(offset) and how many records to get(limit). In the context of software applications, offset pagination is a technique that may be employed to facilitate the content navigation by incorporating forward and back buttons on a given page.

With Appwrite, offset pagination is achieved using the `Query.limit()` and `Query.offset()` methods. Here's an example using Appwrite's `listDocuments()` function to list the next four tasks:

```js
const page2 = await databases.listDocuments(
    '[TODOS_DATABASE_ID]',
    '[TODOS_COLLECTION_ID]',
    [
        Query.limit(4),
        Query.offset(4)
    ]
);
```
this will retrieve the next four tasks, starting at task-5

We'll explore different UI patterns for offset pagination and how to implement them in our React app.

# Creating the Pagination Component {% #creating-the-pagination-component %}
{% tabs %}
{% tabsitem #Basic-pagination title="Basic Pagination" %}

Create a file and named `src/components/BasicPagination.jsx`, insert the following code:
```js
import React from 'react';

function BasicPagination(props) {
  const { loadPrev, loadNext, hasNext, hasPrev } = props;

  return (
    <div>
      <button disabled={!hasPrev} onClick={loadPrev}>Previous</button>
      <button disabled={!hasNext} onClick={loadNext}>Next</button>
    </div>
  );
}

export default BasicPagination;

```
This component will only have "Previous" and "Next" buttons.
{% /tabsitem %}
{% tabsitem #numbered-pagination title="Numbered Pagination" %}
Create a file and named `src/components/NumberedPagination.jsx`, insert the following code:
```js
import React from 'react';

function NumberedPagination(props) {
  const {
    currentPage,
    totalPages,
    loadPrev,
    loadNext,
    loadPage,
    hasNext,
    hasPrev
  } = props;

   const pages = [];

  for (let i = 1; i <= totalPages; i++) {
    pages.push(
      <button key={i} disabled={i === currentPage} onClick={() => loadPage(i)}>
        {i}
      </button>,
    );
  }

  return (
    <div>
      <button disabled={!hasPrev} onClick={loadPrev}>Previous</button>
      {pages
      <button disabled={!hasNext} onClick={loadNext}>Next</button>
    </div>
  );
}

export default NumberedPagination;
```

This component will have "Previous" and "Next" buttons along with numbered pages for direct navigation.
{% /tabsitem %}
{% /tabs %}

# Update the todos context {% #update-the-todos-context %}

Update the contents of `src/lib/context/todos.jsx` with the following code, replacing `[YOUR_DATABASE_ID]` and `[YOUR_COLLECTION_ID]` with your project ID and collection ID.

```js
import { createContext, useContext, useEffect, useState } from "react";
import { databases } from "../appwrite";
import { Query } from "appwrite";

const TODOS_DATABASE_ID = "[YOUR_DATABASE_ID]";
const TODOS_COLLECTION_ID = "[YOUR_COLLECTION_ID]";

const TodosContext = createContext();

export function useTodos() {
  return useContext(TodosContext);
}

export function TodosProvider(props) {
  const [todos, setTodos] = useState([]);
  const [offset, setOffset] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [counts, setCounts] = useState({
    totalPages: 500,
    totalResults: 1000,
  });
  const pageLimit = 4;
  const hasNext = counts.totalPages > currentPage;

  async function loadNext() {
    if (hasNext) {
      setOffset(offset + pageLimit);
    }
  }

  async function loadPrev() {
    if (offset >= pageLimit) {
      setOffset(offset - pageLimit);
    }
  }

  async function loadPage(pageNumber) {
    setOffset((pageNumber - 1) * pageLimit);
  }

  async function init() {
    try {
      const response = await databases.listDocuments(
        TODOS_DATABASE_ID,
        TODOS_COLLECTION_ID,
        [
          Query.orderAsc("$createdAt"),
          Query.limit(pageLimit),
          Query.offset(offset),
        ],
      );

      setTodos(response.documents);
      setCurrentPage(Math.floor(offset / pageLimit) + 1);
      setCounts({
        totalPages: response.total / pageLimit,
        totalResults: response.total,
      });
    } catch (error) {
      console.log(error);
    }
  }
  useEffect(() => {
    init();
  }, [offset]);

  return (
    <TodosContext.Provider
      value={{
        current: todos,
        loadNext,
        loadPrev,
        loadPage,
        currentPage,
        totalPages: counts.totalPages,
        hasNext,
        hasPrev: currentPage > 1,
      }}>
      {props.children}
    </TodosContext.Provider>
  );
}
```
In this updated context:
 * We're using `Query.limit()` to set the number of tasks we want to fetch per page.
 * We're using `Query.offset()` to set the starting point for fetching tasks based on the current page.
 * We've added `loadNextPage`, `loadPrevPage`, and `loadPage` function to handle pagination.

 Now, you can use this context in your components to display todo items and handle pagination using Appwrite's offset pagination methods.

# Update the Todos page {% #update-the-todoss-page %}

Now, let's use our Pagination component in the Todos page.
{% tabs %}
{% tabsitem #Basic-pagination title="Basic Pagination" %}
Update the Todos page in `src/pages/Todos.jsx`:
```js
import BasicPagination from '../components/BasicPagination';
import {useTodos} from "../lib/context/todos";
export function TodosWithBasicPagination() {
  const todos = useTodos();

  return (
    <section>
      <h2>Todos</h2>
      <ul>
        {todos.current.map(todo => (
          <li key={`todo-${todo.taskId}`}>
            <span>{`Task-${todo.taskId}: `}</span>
            <input type='checkbox' id={todo.taskId} name={todo.title} />
            <label htmlFor={todo.title}>{todo.title}</label>
          </li>
        ))}
      </ul>
      <BasicPagination
        loadPrev={todos.loadPrev}
        loadNext={todos.loadNext}
        hasNext={todos.hasNext}
        hasPrev={todos.currentPage > 1}
      />
    </section>
  );
}
```
{% /tabsitem %}
{% tabsitem #numbered-pagination title="Numbered Pagination" %}
Update the Todos page in `src/pages/Todos.jsx`:
```js
import NumberedPagination from '../components/NumberedPagination';

export function TasksWithNumberedPagination() {
  const tasks = useTasks();

  return (
    <section>
      <h2>Todos</h2>
      <ul>
        {tasks.current.map(task => (
          <li key={`task-${task.taskId}`}>
            <span>{`Task-${task.taskId}: `}</span>
            <input type='checkbox' id={task.taskId} name={task.title} />
            <label htmlFor={task.title}>{task.title}</label>
          </li>
        ))}
      </ul>
      <NumberedPagination
        currentPage={tasks.currentPage}
        totalPages={tasks.totalPages}
        loadPrev={tasks.loadPrev}
        loadNext={tasks.loadNext}
        loadPage={tasks.loadPage}
        hasNext={tasks.hasNext}
        hasPrev={tasks.currentPage > 1}
      />
    </section>
  );
}
```
{% /tabsitem %}
{% /tabs %}

You can now choose between the two offset pagination styles based on your UI/UX preferences.

In the next step, we'll transition from our current pagination method to cursor pagination method.

# See it in action {% #see-it-in-action %}
Before moving on, take a moment to run your application and see the offset pagination in action. Navigate through the tasks using the "forward" and "back" buttons and observe how the tasks are displayed based on the offset. This hands-on experience will give you a clearer understanding of how offset pagination works in a real-world scenario.