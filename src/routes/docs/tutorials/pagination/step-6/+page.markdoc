---
layout: tutorial
title: Adding todos
description: Add todos to your React application using Appwrite.
step: 6
---
# Add todos context {% #add-todos-context %}

We'll now display our Todos on the page. In React, [context](https://reactjs.org/docs/context.html) allows us to share data across components. We'll leverage context and create a custom hook to manage our todos.

Create a new file named `src/lib/context/todos.jsx` and insert the following code:

```js
import { createContext, useContext, useEffect, useState } from "react";
import { databases } from "../appwrite";
import { Query } from "appwrite";

const TODOS_DATABASE_ID = "[YOUR_DATABASE_ID]";
const TODOS_COLLECTION_ID = "[YOUR_COLLECTION_ID]";

const TodosContext = createContext();

export function useTodos() {
  return useContext(TodosContext);
}

export function TodosProvider(props) {
  const [todos, setTodos] = useState([]);

  async function init() {
    try {
      const response = await databases.listDocuments(
        TODOS_DATABASE_ID,
        TODOS_COLLECTION_ID,
        [Query.orderDesc("$createdAt"), Query.limit(4)],
      );
      setTodos(response.documents);
    } catch (error) {
      console.log(error);
    }
  }

  useEffect(() => {
    init();
  }, []);

  return (
    <TodosContext.Provider value={{ current: todos }}>
      {props.children}
    </TodosContext.Provider>
  );
}
```
We'll expand on this context's functionality later.

## Basic Routing {% #basic-routing %}

First, enclose the `main` element with the `TodosProvider` component.

Update `src/App.jsx` with the following code:

```js
import { TodosProvider } from "./lib/context/todos";
import { Todos } from "./pages/Todos";

function App() {
  return (
    <div>
      <TodosProvider>
        <Todos />
      </TodosProvider>
    </div>
  );
}

export default App;
```

### Todos page {% #todos-page %}

Now, we can craft the Todos page, which will present users with a list of todos-a small chuck of the large dataset.

Create a new file named `src/pages/Todos.jsx` and insert this placeholder code:

```js
import { useTodos } from "../lib/context/todos";
export function Todos() {
  const todos = useTodos();
  return (
    <section>
      <h2>Todos</h2>
      <ul>
        {todos.current.map((todo) => (
          <li key={`todo-${todo.taskId}`}>
            <span>{`Task-${todo.taskId}: `}</span>
            <input type='checkbox' id={todo.taskId} name={todo.title} />
            <label htmlFor={todo.title}>{todo.title}</label>
          </li>
        ))}
      </ul>
    </section>
  );
}
```

The next steps will involve integrating offset or cursor pagination in our application.
