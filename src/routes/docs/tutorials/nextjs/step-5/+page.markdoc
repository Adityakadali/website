---
layout: tutorial
title: Add database
description: Add databases and queries to store user data in your Next.js app.
step: 5
---
# Create collection {% #create-collection %} 
In Appwrite, data is stored as a collection of documents. Create a collection in the [Appwrite Console](https://cloud.appwrite.io/) to store our expenses.

{% only_dark %}
![Create project screen](/images/docs/tutorials/dark/expense-tracker-collection.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/tutorials/expense-tracker-collection.png)
{% /only_light %}

In the collection go to attributes and add the following attributes:
| Field       | Type    | Required | Elements       |
|-------------|---------|----------|----------------|
| userId      | String  | Yes      |                |
| title       | String  | Yes      |                |
| amount      | Integer | Yes      |                |
| type        | Enum    | Yes      | Paid, Received |

Now that we have created a collection, we have to add permissions to the collection. Go to the settings tab, scoll to the permissions sections add the following permissions:

{% only_dark %}
![Create project screen](/images/docs/tutorials/dark/collection-permissions.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/tutorials/collection-permissions.png)
{% /only_light %}

You can also add permission for a specific user or a team.

# Add new expense {% #add-new-expense %}
Now that we have a collection, we can add a new expense to the database.

First we need to create a new API endpoint to add an expense. Create a new file `api/expense/index.js` and add the following code.

```js
import { ID } from "appwrite";
import {
  EXPENSE_COLLECTION_ID,
  EXPENSE_DATABASE_ID,
  account,
  database,
} from "@/config/appwrite";

export default async (req, res) => {
  const method = req.method;
  const { jwt } = req.headers;
  if (!jwt) {
    return res.status(400).json({ message: "Unauthorized" });
  }
  account.client.setJWT(jwt);

  if (method === "POST") {
    const { userId, title, amount, type } = req.body;
    if (!userId || !title || !amount || !type) {
      return res.status(401).json({ message: "Missing fields" });
    }
    try {
      await database.createDocument(
        EXPENSE_DATABASE_ID,
        EXPENSE_COLLECTION_ID,
        ID.unique(),
        {
          userId: userId,
          title: title,
          amount: amount,
          type: type,
        }
      );
      return res.status(200).json({ message: "Saved successfully" });
    } catch (error) {
      console.log(error);
      return res.status(500).json({ message: "Internal server error" });
    }
  } 
};
```

We have used Appwrite `createDocument` method to add a new document to the database. The method takes the following parameters: `databaseId`, `collectionId`, `documentId`, `data`. 

The `databaseId` is the ID of the database we want to add the document to. The `collectionId` is the ID of the collection we want to add the document to. The `documentId` is the ID of the document we want to add. We have used the `ID.unique()` method to generate a unique ID for the document. The `data` is an object that contains the data we want to add to the document.

We have created a new API endpoint that will add a new expense to the database. The endpoint will be available at `/api/expense`.

Let's use the new API. In the `pages/index.js` file, add the following code to the `addExpense` function. This function will add a new expense to the database.

```js
import React, { useState } from "react";
import { useCookie } from "next-cookie";
import toast from "react-hot-toast";

const Home = (props) => {
  const [popup, setPopup] = useState(null);
  const cookie = useCookie(props.cookie);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const createExpense = async (title, amount, type) => {
    const response = await fetch("/api/expense", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId: userId,
        title: title,
        amount: amount,
        type: type,
      }),
    });

    if (response.status === 200) {
      toast.success("Saved successfully");
    }
  };

  return (
    <>
      {popup?.type === "new" && (
        <CreateExpensePopup 
          setPopup={setPopup} 
          createExpense={createExpense} 
        />
      )}
      <div className="container u-flex-vertical u-gap-12 u-cross-center">
        <h1 className="heading-level-1 font-bold">Your expenses</h1>
        <button
          className="button"
          onClick={() => setPopup({ type: "new", data: null })}
        >
          <span className="icon-plus" aria-hidden="true"></span>
          <span className="text">New Expense</span>
        </button>
      </div>
    </>
  );
};
```

We are rendering a new component `CreateExpensePopup` when the user clicks on the `New Expense` button. The `CreateExpensePopup` component will be used to create a new expense. 

Let's create the `CreateExpensePopup` component. Create a new file `components/CreateExpensePopup.js` and add the following code.

```js
import React, { useState } from "react";
import toast from "react-hot-toast";
import { AiOutlineCloseCircle } from "react-icons/ai";

const CreateExpensePopup = ({ setPopup, createExpense }) => {
  const [item, setItem] = useState({
    title: "",
    amount: "",
    type: "",
  });

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!item.title) {
      return toast.error("Title is required");
    }
    if (!item.amount) {
      return toast.error("Amount is required");
    }
    if (!item.type) {
      return toast.error("Type is required");
    }

    await createExpense(item.title, item.amount, item.type);
  };

  return (
    <div className="u-position-fixed u-inset-0 u-width-full-line u-full-screen-height u-flex u-cross-center u-main-center u-z-index-10 lite-bg">
      <div className="card u-max-width-600 u-width-full-line">
        <button
          onClick={() => setPopup(null)}
          className="u-position-absolute u-inset-inline-end-16 u-inset-block-start-16"
        >
          <span className="icon-x-circle" />
        </button>
        <p className="heading-level-3 font-bold u-text-center">
          Create Expense
        </p>
        <form className="u-margin-block-start-12" onSubmit={handleSubmit}>
          <div>
            <label className="label">Title</label>
            <div className="input-text-wrapper">
              <input
                className="input-text"
                placeholder="Title"
                id="title"
                type="text"
                required={true}
                value={item.title}
                onChange={(e) => setItem({ ...item, title: e.target.value })}
              />
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <label className="label">Amount($)</label>
            <div className="input-text-wrapper">
              <input
                className="input-text"
                placeholder="Title"
                id="amount"
                type="number"
                required={true}
                min="0"
                value={item.amount}
                onChange={(e) => setItem({ ...item, amount: e.target.value })}
              />
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <label className="label">Type</label>
            <div className="input-text-wrapper">
              <select
                id="type"
                className="input-text"
                value={item.type}
                onChange={(e) => setItem({ ...item, type: e.target.value })}
              >
                <option value="">Select</option>
                <option value="Paid">Paid</option>
                <option value="Received">Received</option>
              </select>
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <button type="submit" className="button">
              Create
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateExpensePopup;
```

We are using the `createExpense` function on the `handleSubmit` function to create a new expense.

Here we are also using a custom className `lite-bg` which we can define in the `/src/styles/globals.css` file.

```css
.lite-bg {
  background-color: hsl(var(--color-primary-100) / 0.2);
}
```