---
layout: tutorial
title: Create expense list
description: Fetch user expenses from Appwrite database and display them in a list.
step: 6
---
# Create list API {% #create-list-api %} 
We will create a new API endpoint that will fetch the user expenses from the database. Create a new file `api/expense/list.js` and add the following code.

```js
import { Query } from "appwrite";
import {
  EXPENSE_COLLECTION_ID,
  EXPENSE_DATABASE_ID,
  account,
  database,
} from "@/config/appwrite";

export default async (req, res) => {
  const method = req.method;

  if (method === "POST") {
    const { userId} = req.body;
    const { jwt } = req.headers;

    if (!userId || !jwt) {
      return res.status(401).json({ message: "Missing fields" });
    }
    account.client.setJWT(jwt);

    try {
      const items = await database.listDocuments(
        EXPENSE_DATABASE_ID,
        EXPENSE_COLLECTION_ID,
        [
          Query.equal("userId", [userId]),
          Query.orderDesc("$createdAt"),
        ]
      );
      return res
        .status(200)
        .json({ items: items.documents, total: items.total });
    } catch (error) {
      return res
        .status(500)
        .json({ message: "Internal server error", error: error.message });
    }
  } else {
    return res.status(405).json({ message: "Method Not Allowed" });
  }
};
```

With Appwrite's `listDocuments` method we can fetch the documents from the database.

We are also using Appwrite's `Query` class to filter the documents. We have used the `Query.equal` method to filter the documents by `userId`. We have also used the `Query.orderDesc` method to order the documents by `$createdAt` in descending order.


# Expense list component {% #expense-list-component %}

Let's fetch the user expenses from the database and display them in a list. Open the `pages/index.js` file and add the following code.

```js
import React, { useEffect, useState } from "react";
import { useCookie } from "next-cookie";
import toast from "react-hot-toast";
import { useRouter } from "next/router";

import ExpenseList from "@/components/ExpenseList";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const cookie = useCookie(props.cookie);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    const response = await fetch("/api/expense/list", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId: userId,
        start: start,
        limit: limit,
      }),
    });
    const data = await response.json();
    if (data.error === "Failed to verify JWT. Invalid token: Expired") {
      cookie.remove("jwt");
      cookie.remove("userid");
      toast.error("Session expired, please login again");
      router.push("/login");
    } else {
      setExpenses(data.items);
      setTotal(data.total);
    }
  };

  useEffect(() => {
    getExpenses();
  }, []);

  return (
    <ExpenseList
      expenses={expenses}
    />
  );
};

export default Home;
```

Now we will render the Expenses. Create a new file `components/ExpenseList.js` and add the following code.

```js
import React from "react";

const ExpenseList = ({ expenses, setPopup }) => {
  return (
    <div className="u-padding-block-8 u-width-full-line">
      {expenses?.length > 0 &&
        expenses?.map((expense) => (
          <div
            className="card u-padding-block-16 u-margin-block-start-12"
            key={expense.$id}
          >
            <div className="u-flex u-main-space-between">
              <p className="heading-level-4 u-bold">{expense.title}</p>
              <div className="u-flex u-gap-8">
                <p className="heading-level-5 u-bold">
                  {expense.type === "Paid" && "-"}
                  {expense.type === "Received" && "+"}${expense.amount}
                </p>
                <span
                  className={
                    expense.type === "Paid" ? "tag is-danger" : "tag is-success"
                  }
                >
                  {expense.type}
                </span>
              </div>
            </div>
            <div className="u-flex u-main-space-between">
              <p className="body-text-1">
                {new Date(expense.$createdAt).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </p>
              <div className="u-flex u-gap-8">
                <button  className="cursor-pointer">
                  <div className="icon-pencil-alt" />
                </button>
                <button className="cursor-pointer">
                  <div className="icon-trash" />
                </button>
              </div>
            </div>
          </div>
        ))}
    </div>
  );
};

export default ExpenseList;
```

We are also rendering edit and delete buttons. We will add the functionality for these buttons in the next step.