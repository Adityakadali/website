---
layout: tutorial
title: Implement authtentication
description: Add Appwrite authentication to your Next.js app
step: 4
---

# Signup page {% #signup-page %}      

In your project under the pages directory, create a new file `src/pages/signup.js`. Next.js will automatically create a route for this page `/signup`. Let's create the signup form.

```js
import { useState } from "react";
import Link from "next/link";

import { account } from "@/config/appwrite";

const SignUp = (props) => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  return (
    <section className="container u-flex u-main-center u-cross-center u-full-screen-height">
      <div className="u-max-width-350 u-width-full-line u-padding-8">
        <h1 className="heading-level-1 font-bold">Sign Up</h1>
        <p className="body-text-1 u-bold u-padding-block-16">
          Already have an account?{" "}
          <Link href="/login" className="u-cursor-pointer u-underline">
            Login
          </Link>
        </p>
        <form onSubmit={signup}>
          <div>
            <label class="label">Name</label>
            <div class="input-text-wrapper">
              <input
                class="input-text"
                placeholder="Name"
                id="name"
                type="text"
                required={true}
                onChange={(e) => sette(e.target.value)}
              />
            </div>
          </div>
          <div>
            <label class="label">Email</label>
            <div class="input-text-wrapper">
              <input
                class="input-text"
                placeholder="Email"
                id="email"
                type="email"
                required={true}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
          </div>
          <div>
            <label class="label">Password</label>
            <div class="input-text-wrapper">
              <input
                class="input-text"
                placeholder="Password"
                id="password"
                type="password"
                required={true}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>
          <div className="u-padding-block-16">
            <button
              type="submit"
              disabled={!email || !password}
              className="button"
            >
              Sign Up
            </button>
          </div>
        </form>
      </div>
    </section>
  );
};

export default SignUp;
```

Now let's add the signup function. We will be using Appwrite's `create` method to create a new user. We will also be using `react-hot-toast` to show toast messages.


```js
const signup = async (e) => {
  e.preventDefault();
  try {
    await account.create(ID.unique(), email, password, name);
    await account.createEmailSession(email, password);
    const jwt = await account.createJWT();
    const user = await account.get();
    cookie.set("jwt", jwt.jwt);
    cookie.set("userid", user.$id);
    toast.success("Signed up successfully");
    router.push("/");
  } catch (error) {
    toast.error(error.message);
  }
};
```

After the user is created, we are creating a session using `createEmailSession` method. Then we are creating a JWT token using `createJWT` method. We are storing the JWT token and user id in the cookie. Then we are redirecting the user to the home page.


# Login page {% #login-page %}      

In your project under the pages directory, create a new file `src/pages/login.js`. Next.js will automatically create a route for this page `/login`. Let's create the login form.

```js
import Link from "next/link";
import { useState } from "react";
import toast from "react-hot-toast";

import { account } from "@/config/appwrite";

const Login = (props) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  return (
    <section className="container u-flex u-main-center u-cross-center u-full-screen-height">
      <div className="u-max-width-350 u-width-full-line u-padding-8">
        <h1 className="heading-level-1 font-bold">Login</h1>
        <p className="body-text-1 u-bold u-padding-block-16">
          Don&apos;t have an account?{" "}
          <Link href="/signup" className="u-cursor-pointer u-underline">
            Sign Up
          </Link>
        </p>
        <form onSubmit={loginUser}>
          <div>
            <label class="label">Email</label>
            <div class="input-text-wrapper">
              <input
                class="input-text"
                placeholder="Email"
                id="email"
                type="email"
                required={true}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
          </div>
          <div>
            <label class="label">Password</label>
            <div class="input-text-wrapper">
              <input
                class="input-text"
                placeholder="Password"
                id="password"
                type="password"
                required={true}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>
          <div className="u-padding-block-16">
            <button
              type="submit"
              disabled={!email || !password}
              className="button"
            >
              Login
            </button>
          </div>
        </form>
      </div>
    </section>
  );
};

export default Login;
```

Now let's add the login function. We will be using Appwrite's `createEmailSession` method to create a new session. We will also be using `react-hot-toast` to show toast messages.

```js
const loginUser = async (e) => {
  e.preventDefault();
  try {
    await account.createEmailSession(email, password);
    const jwt = await account.createJWT();
    const user = await account.get();
    cookie.set("jwt", jwt.jwt);
    cookie.set("userid", user.$id);
    toast.success("Logged in successfully");
    router.push("/");
  } catch (error) {
    toast.error(error.message);
  }
};
```

After the session is created, we are creating a JWT token using `createJWT` method. We are storing the JWT token and user id in the cookie. Then we are redirecting the user to the home page.

# Logout {% #logout %}
For logout, we will be using Appwrite's `deleteSessions` method. We will also be using `react-hot-toast` to show toast messages.

```js
import { account } from "@/config/appwrite";

const logout = async () => {
  try {
    await account.deleteSessions("current");
    cookie.remove("jwt");
    cookie.remove("userid");
    toast.success("Logged out successfully");
    router.push("/login");
  } catch (error) {
    toast.error(error.message);
  }
};
```