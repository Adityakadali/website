---
layout: tutorial
title: Authentication
description: Learn to build an Android app with no backend code using an Appwrite backend.
step: 4
difficulty: beginner
---

# User Flow {% #user-flow %}

This is the user flow that we are going to achieve in this page

![user-flow](/images/docs/tutorials/recipewrite-user-flow.png)

Keeping the userflow in mind, let us start by initializing three new empty activities -

- **LoginActivity**
- **RegisterActivity**
- **HomeActivity**

# Appwrite methods {% #appwrite-methods %}

Let us implement some utility methods in **Appwrite.java**

- **onGetAccount**

It will be used in **MainActivity** to check if the user is already logged in or not.

```java
public static void onGetAccount(Context context) {
    try {
        /* Account.get is used to get the currently logged in user. */ 
        account.get(new CoroutineCallback<>((result, error) -> {

            Intent intent;
            
            if (error != null) {  /* User isn't logged in. */
                intent = new Intent(context, LoginActivity.class);
            } else {              /* User is logged in.    */
                intent = new Intent(context, HomeActivity.class);

                /* This will pass the account name to HomeActivity */
                intent.putExtra("name", result.getName());
            }

            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
            ((Activity) context).finish();
        }));
    } catch (Exception e) {
        e.printStackTrace();
    }
}
```

- **onLogin**

This method will take in email and password, and will try to log the user in.

```java
public static void onLogin(Context context, String email, String password) {
    /* Allow the user to login into their account by providing a valid email and password combination. */
    account.createEmailSession(
        email,
        password,
        new CoroutineCallback<>((result, error) -> {
            if (error != null) {
                /* Login unsuccessful */
                error.printStackTrace();
                return;
            }
            
            /* Get current user and redirect to HomeActivity */
            onGetAccount(context);
        })
    );
}
```

- **onCreateAccount**

This method will take in email, password and name, and will try to register our new user to the app.

```java
public static void onCreateAccount(Context context, String email, String password, String name) {
    try {
        /* Allow a new user to register a new account */
        account.create(
            ID.Companion.unique(),
            email,
            password,
            name,
            new CoroutineCallback<>((result, error) -> {
                if (error != null) {
                    /* Create account unsuccessful */
                    error.printStackTrace();
                    return;
                }
                
                /* Log the new user in, and redirect to HomeActivity */
                onLogin(context, email, password);
            })
        );
    } catch (AppwriteException e) {
        e.printStackTrace();
    }
}
```

- **onLogout**

```java
public static void onLogout(Context context) {
    /* Logout the user. Use 'current' as the session ID to logout on this device, use a session ID to logout on another device. */
    account.deleteSession(
        "current",
        new CoroutineCallback<>((result, error) -> {
            if (error != null) {
                /* Logout unsuccessful */
                error.printStackTrace();
                return;
            }

            /* Redirect to LoginActivity if logout successful */
            Intent intent = new Intent(context, LoginActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
            ((Activity) context).finish();
        })
    );
}
```

# Main Activity {% #main-activity %}

As shown in the userflow, main activity will just check if the user is already logged in or not. It will redirect accordingly.

## **activity_main.xml**

We just need a progress bar here.

```xml
<ProgressBar
    android:id="@+id/progressBar"
    style="?android:attr/progressBarStyle"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    app:layout_constraintBottom_toBottomOf="parent"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toTopOf="parent" />
```

## **MainActivity.java**

We will reuse our **onGetAccount** method here.

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
    setContentView(R.layout.activity_main);
    
    /* Ensure this is the first time onCreate is called. */
    /* This will prevent appwrite to be initialized multiple times */
    if (savedInstanceState == null) {
        Appwrite.init(this);
        Appwrite.onGetAccount(this);
    }
}
```

# Login Activity {% #login-activity %}

## **activity_login.xml**

We will need four elements here.

- Email field

```xml
<EditText
    android:id="@+id/email_edit_text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="Email"
    android:inputType="textEmailAddress"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toTopOf="parent" />
```

- Password field

```xml
<EditText
    android:id="@+id/password_edit_text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="Password"
    android:inputType="textPassword"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/email_edit_text" />
```

- Login button to submit the entered email and password

```xml
<Button
    android:id="@+id/login_button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Login"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/password_edit_text" />
```

- Register button to launch **RegisterActivity**

```xml
<Button
    android:id="@+id/register_button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="REGISTER?"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/login_button" />
```

## **LoginActivity.java**

Now let us write logic of button clicks. There are a couple of ways to implement `OnClickListener` on views. Here we are going to use `View.OnClickListener` interface.

Change the definition of `LoginActivity` to implement `View.OnClickListener` interface.

```java
public class LoginActivity extends AppCompatActivity implements View.OnClickListener
```

Declare UI views within this class

```java
EditText emailEditText, passwordEditText;
Button loginButton, registerButton;
```

Initialize these variables in `onCreate` method.

```java
emailEditText = findViewById(R.id.email_edit_text);
passwordEditText = findViewById(R.id.password_edit_text);
loginButton = findViewById(R.id.login_button);
registerButton = findViewById(R.id.register_button);
```

Set `OnClickListener`s on both the buttons inside `onCreate` method.

```java
loginButton.setOnClickListener(this);
registerButton.setOnClickListener(this);
```

Now override the `onClick` method of `LoginActivity` to finally write the click logic.

```java
@Override
public void onClick(View view) {

    /* Extract user input */
    String email = emailEditText.getText().toString();
    String password = passwordEditText.getText().toString();

    switch ((view.getId())) {
        case R.id.login_button:
            /* Do something */
            break;

        case R.id.register_button:
            /* Do something */
            break;
    }
}
```

We can simply use our Appwrite method to login the user, if **login_button** is pressed -

```java
case R.id.login_button:
    Appwrite.onLogin(this, email, password);
    break;
```

And redirect to **RegisterActivity**, if **register_button** is pressed -

```java
case R.id.register_button:
    /* Redirect to RegisterActivity */
    Intent intent = new Intent(this, RegisterActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_TASK_ON_HOME);
    startActivity(intent);
    this.finish();
    break;
```

# Register Activity {% #register-activity %}

## **activity_register.xml**

We will need five elements here.

- Name field

```xml
<EditText
    android:id="@+id/name_edit_text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="Name"
    android:inputType="textPersonName"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toTopOf="parent" />
```

- Email field

```xml
<EditText
    android:id="@+id/email_edit_text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="Email"
    android:inputType="textEmailAddress"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/name_edit_text" />
```

- Password field

```xml
<EditText
    android:id="@+id/password_edit_text"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:hint="Password"
    android:inputType="textPassword"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/email_edit_text" />
```

- Register button to submit the entered name, email and password

```xml
<Button
    android:id="@+id/register_button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Register"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/password_edit_text" />
```

- Login button to launch **LoginActivity**

```xml
<Button
    android:id="@+id/login_button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="LOGIN?"
    app:layout_constraintEnd_toEndOf="parent"
    app:layout_constraintStart_toStartOf="parent"
    app:layout_constraintTop_toBottomOf="@+id/register_button" />
```

## **RegisterActivity.java**

Change the definition of `RegisterActivity` to implement `View.OnClickListener` interface.

```java
public class RegisterActivity extends AppCompatActivity implements View.OnClickListener
```

Declare UI views within this class

```java
EditText nameEditText, emailEditText, passwordEditText;
Button loginButton, registerButton;
```

Initialize these variables in `onCreate` method.

```java
nameEditText = findViewById(R.id.name_edit_text);
emailEditText = findViewById(R.id.email_edit_text);
passwordEditText = findViewById(R.id.password_edit_text);
loginButton = findViewById(R.id.login_button);
registerButton = findViewById(R.id.register_button);
```

Set `OnClickListener`s on both the buttons inside `onCreate` method.

```java
registerButton.setOnClickListener(this);
loginButton.setOnClickListener(this);
```

Now override the `onClick` method of `RegisterActivity` to finally write the click logic.

```java
@Override
public void onClick(View view) {

    /* Extract user input */
    String name = nameEditText.getText().toString();
    String email = emailEditText.getText().toString();
    String password = passwordEditText.getText().toString();

    switch ((view.getId())) {
        case R.id.register_button:
            /* Do something */
            break;

        case R.id.login_button:
            /* Do something */
            break;
    }
}
```

We can simply use our Appwrite method to register the user, if **register_button** is pressed -

```java
case R.id.register_button:
    Appwrite.onCreateAccount(this, email, password, name);
    break;
```

And redirect to **LoginActivity**, if **login_button** is pressed -

```java
case R.id.login_button:
    /* Redirect to LoginActivity */
    Intent intent = new Intent(this, LoginActivity.class);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_TASK_ON_HOME);
    startActivity(intent);
    this.finish();
    break;
```

# Home Activity {% #home-activity %}

Finally, we want to add a logout button in the app bar of **HomeActivity**.

Let us start by creating a vector asset for logout icon.

Right click on **res** folder, click **New**, click **Vector Asset**.

Choose logout icon in **Clip Art** and then give the asset **logout** name.

![Asset Studio](/images/docs/tutorials/recipewrite-asset-studio.png)

Now, create a new file **res/menu/mymenu.xml**

```xml
<menu xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:android="http://schemas.android.com/apk/res/android" >
    <item
        android:id="@+id/action_logout"
        android:icon="@drawable/logout"
        android:orderInCategory="100"
        app:showAsAction="always"
        android:title="Logout" />
</menu>
```

Now, override ```onCreateOptionsMenu``` method of ```HomeActivity``` in order to show the above defined icon on the app bar.

```java
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.mymenu, menu);
    return super.onCreateOptionsMenu(menu);
}
```

Finally, to write its click logic, override ```onOptionsItemSelected``` method and use our already defined appwrite method ```onLogout```.

```java
@Override
public boolean onOptionsItemSelected(MenuItem item) {
    int id = item.getItemId();

    if (id == R.id.action_logout) {
        Appwrite.onLogout(this);
    }

    return super.onOptionsItemSelected(item);
}
```

Kudos! We started from zero and now we have a full fledged authentication system.